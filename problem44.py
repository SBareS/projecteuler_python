"""
Pentagon numbers
Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first
ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their 
difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk - Pj| is minimised; what is the value of D?
"""

from itertools import count, takewhile
from math import isqrt


def pentagonal_numbers(start=1):
    return (k * (3*k - 1) // 2 for k in count(start))

def is_pentagonal(n):
    # n = k*(3*k-1)/2 and k > 0 <=> k = (1 + sqrt(24*n + 1))/6
    # This will be an integer exactly when 
    # 24*n + 1 = a**2 for some a congruent to -1 mod 6.
    d = 24*n + 1
    a = isqrt(d)
    return a**2 == d and a % 6 == 5

def is_twice_pentagonal(n):
   q, r = divmod(n, 2)
   return r == 0 and is_pentagonal(q)

def find_answer():
    # Call the two pentagonal numbers a and b with a < b, and let
    #   sum = a + b,    diff = b - a. 
    # Then 
    #   diff < b < sum < 2*b < 2*diff, 
    # and
    #   sum + diff = 2*b, sum - diff = 2*a
    for i, diff in enumerate(pentagonal_numbers(), 1):
        for sum in takewhile(lambda x: x < 2* diff, pentagonal_numbers(i+1)):
            if is_twice_pentagonal(sum - diff) and is_twice_pentagonal(sum + diff):
                return diff

print(find_answer())
correct_answer = "5482660"