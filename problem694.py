"""
Cube-full Divisors

A positive integer n is considered cube-full, if for every prime p that 
divides n, so does p^3. Note that 1 is considered cube-full.

Let s(n) be the function that counts the number of cube-full divisors of n. 
For example, 1, 8 and 16 are the three cube-full divisors of 16. Therefore,
s(16) = 3.

Let S(n) represent the summatory function of s(n).

You are given S(16) = 19, S(100) = 126, and S(10000) = 1334.

Find S(10^18). 
"""

# Standard trick which is used in many other problems as well: Instead of 
# summing over all i from 1 to 10**18, count how many times each cubeful 
# number contributes to the sum. Said cubeful numbers can be generated by 
# backtracking, using only primes up to 10**6.

from primes import primes_lt


large_bound = 10**18
small_bound = 10**6

primes = primes_lt(small_bound + 1)

def cubeful_it(i, cobound):
    yield 1
    for j in range(i, len(primes)):
        p = primes[j]
        ppow = p**3
        if ppow * cobound > large_bound:
            break
        while ppow * cobound <= large_bound:
            for rest in cubeful_it(j+1, ppow * cobound):
                yield ppow * rest
            ppow *= p

print(sum(large_bound//x for x in cubeful_it(0, 1)))

correct_answer = "1339784153569958487"